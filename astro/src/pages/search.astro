---
import Layout from "../layouts/Layout.astro";
import PageHeader from "../components/PageHeader.astro";
import { SearchResultItem, type SearchResultPost } from "../components/SearchResultItem.tsx";
import { extractSnippet } from "../../../shared/services/snippet.ts";
import { Index } from "flexsearch";
import data from "../../../data.json";

export const prerender = false;

// Get search query from URL parameters
const url = new URL(Astro.request.url);
const q = url.searchParams.get("q");

let searchResults: SearchResultPost[] = [];
let status: "no-query" | "no-results" | "success" = "no-query";

if (q && q.trim()) {
  // Initialize FlexSearch index (same configuration as Fresh)
  const index = new Index({
    preset: "memory",
    tokenize: "full",
  });

  // Index all posts (optimize by caching valid posts)
  const validPosts = data.filter((post) => post.createdAt);
  
  // Batch index operations for better performance
  validPosts.forEach((post, i) => {
    const content = `${post.title} ${post.body}`;
    index.add(i, content);
  });

  // Search and get results with proper limit
  const searchResultIds = index.search(q, { limit: 10 }) as number[];
  
  if (searchResultIds.length > 0) {
    status = "success";
    
    searchResults = searchResultIds.map((resultId) => {
      const post = validPosts[resultId];
      
      // Extract snippet (same logic as Fresh)
      const titleText = post.title;
      const bodyText = post.body;
      let snippet = "";

      // First try to find the keyword in the title
      if (titleText.toLowerCase().includes(q.toLowerCase())) {
        snippet = extractSnippet(titleText, q, 100);
      }

      // If no title match or title snippet is too short, try body
      if (!snippet || snippet.length < 20) {
        const bodySnippet = extractSnippet(bodyText, q);
        if (bodySnippet) {
          snippet = bodySnippet;
        }
      }

      return {
        id: post.id,
        title: post.title,
        createdAt: post.createdAt === null ? null : new Date(post.createdAt),
        snippet,
      };
    }).filter((result) => result.createdAt !== null) as SearchResultPost[];
  } else {
    status = "no-results";
  }
}

console.log("here", searchResults)
---

<Layout title={q ? `"${q}" 검색 결과` : "검색"}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <PageHeader searchQuery={q || ""} />

    <!-- Search Results -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      {status === "no-query" && (
        <div class="text-center py-12">
          <h2 class="text-xl font-semibold text-gray-900 mb-2">검색</h2>
          <p class="text-gray-600">검색어를 입력해 주세요.</p>
        </div>
      )}

      {status === "no-results" && (
        <div class="text-center py-12">
          <h2 class="text-xl font-semibold text-gray-900 mb-2">
            "{q}" 검색 결과
          </h2>
          <p class="text-gray-600">검색 결과가 없습니다.</p>
          <p class="text-sm text-gray-500 mt-2">
            다른 검색어를 시도해 보세요.
          </p>
        </div>
      )}

      {status === "success" && (
        <div>
          <h2 class="text-xl font-semibold text-gray-900 mb-6">
            "{q}" 검색 결과 ({searchResults.length}개)
          </h2>
          
          <div class="space-y-4">
            {searchResults.map((result) => (
              <SearchResultItem
                post={result}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>